# -*- coding: utf-8 -*-

import telebot
from telebot import types
import schedule
import time
import random
from threading import Thread
from quotes import*


# built-ins
token = '1480667214:AAFuuQu7aF6Cx1wIDIFGwnsdCQDAeDqZU-s'
bot = telebot.TeleBot(token)
stopped = []


class AsyncScheduler(Thread):
    def __init__(self, name):
        Thread.__init__(self)
        self.name = name

    def run(self):
        while True:
            try:
                schedule.run_pending()
                time.sleep(59)
            except:
                self.run()


scheduler = AsyncScheduler('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏')
scheduler.start()



# functional
def repost():
    users_r = open('users', 'r')
    r = users_r.read().replace('\\n', '')
    r = r.splitlines()
    users_r.close()
    for i in r:
        if i == '1103761115':
            return None
        else:
            bot.send_message(i,
                             text=f'–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à –±–æ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∂–∞–¥–Ω–∏—á–∞–π –∏ –ø–æ–¥–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏! üòâ\n–Ø –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥!',
                             parse_mode='HTML', disable_notification=True)


def rand_quo():
    users_r = open('users', 'r')
    r = users_r.read().replace('\\n', '')
    r = r.splitlines()
    users_r.close()
    for i in r:
        if i not in stopped:
            number = random.randint(0, len(randoms) - 1)
            keyboard = types.InlineKeyboardMarkup()
            key_book = types.InlineKeyboardButton(text='üìñ', callback_data='book', url=randoms[number][3])
            keyboard.add(key_book)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            #   key_like = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
            #   keyboard.add(key_like)
            bot.send_message(i, text=f'<i>{randoms[number][0]}\n</i>\n<b>{randoms[number][1]}</b>\n#{randoms[number][2]}',
                             parse_mode='HTML', reply_markup=keyboard)
        elif i in stopped:
            return None

# rand_quo()

schedule.every().day.at('14:00').do(rand_quo)
schedule.every(2).days.at('16:00').do(repost)



# on start
@bot.message_handler(commands=['start'])
def start(message):
    users_r = open('users', 'r')
    r = users_r.read().replace('\\n', '')
    r = r.splitlines()
    users_r.close()
    users_w = open('users', 'a')
    user_id = message.from_user.id
    bot.send_message(message.from_user.id,
                     '<b>–ü—Ä–∏–≤–µ—Ç, —è BookBot! üìö\n</b> \n<i>–° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞ - –Ω–∞–ø–∏—à–∏ /help \n</i>\n–ê —Ç–∞–∫–∂–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–¥–±–æ—Ä–∞ —Ü–∏—Ç–∞—Ç –¥–ª—è –í–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∏—à–µ–∫! üòâ',
                     parse_mode='HTML')
    if str(user_id) not in r:
        users_w.write(str(user_id) + '\n')
        print(message.from_user.username)
    users_w.close()


# on stop
@bot.message_handler(commands=['stop'])
def stop(message):
    if message.from_user.id not in stopped:
        stopped.append(message.from_user.id)
        bot.send_message(message.from_user.id,
                         '<b>‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n</b> \n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /resume',
                         parse_mode='HTML')
    elif message.from_user.id in stopped:
        bot.send_message(message.from_user.id,
                         '<b>‚ö† –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤–∞—Å!\n</b> \n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /resume',
                         parse_mode='HTML')


# on resume
@bot.message_handler(commands=['resume'])
def resume(message):
    if message.from_user.id in stopped:
        stopped.remove(message.from_user.id)
        bot.send_message(message.from_user.id, '<b>‚úî –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>',
                         parse_mode='HTML')
    elif message.from_user.id not in stopped:
        bot.send_message(message.from_user.id, '<b>‚ö† –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É!</b>',
                         parse_mode='HTML')


# on help
@bot.message_handler(commands=['help'])
def help(message):
    commands = '<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n</b>\n/stop<i> - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n</i>\n/resume<i> - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n</i>\n/report<i> - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏</i>'
    bot.send_message(message.from_user.id, text=commands, parse_mode='HTML')


# on report
@bot.message_handler(commands=['report'])
def report(message):
    keyboard = types.InlineKeyboardMarkup()
    key_report = types.InlineKeyboardButton(text='‚ùó –ü—Ä–æ–±–ª–µ–º–∞/–û—à–∏–±–∫–∞', callback_data='report')
    keyboard.add(key_report)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    key_support = types.InlineKeyboardButton(text='üí° –ò–¥–µ—è/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='support')
    keyboard.add(key_support)
    bot.send_message(message.from_user.id, text=f'–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>—Å–æ–æ–±—â–∏—Ç—å</b>?', parse_mode='HTML',
                     reply_markup=keyboard)


# on messages
@bot.message_handler(content_types=['text', 'voice', 'audio'])
def get_text_messages(message):
    if message.voice is not None or message.audio is not None:
        bot.send_message(message.from_user.id, '–ú–º–º... –†–∞–π –¥–ª—è –º–æ–∏—Ö —É—à–µ–π')


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    keyboard = types.InlineKeyboardMarkup()
    key_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
    keyboard.add(key_cancel)
    if call.data == "report":
        bot.send_message(call.message.chat.id,
                         '<i>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</i>',
                         parse_mode='HTML', reply_markup=keyboard)
        bot.register_next_step_handler(call.message, report_send)
    elif call.data == "support":
        bot.send_message(call.message.chat.id,
                         '<i>–û–ø–∏—à–∏—Ç–µ –í–∞—à—É –∏–¥–µ—é, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</i>',
                         parse_mode='HTML', reply_markup=keyboard)
        bot.register_next_step_handler(call.message, support_send)
    elif call.data == 'cancel':
        bot.send_message(call.message.chat.id,
                         '<b><i>–û—Ç–º–µ–Ω–µ–Ω–æ!</i></b>',
                         parse_mode='HTML')

def report_send(message):
    bot.send_message(977341432,
                     f'‚ùó <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞:\n</b>\n<i>{message.text}\n</i>\n–æ—Ç @{message.from_user.username}',
                     parse_mode='HTML')
    bot.send_message(message.from_user.id, f'‚úî <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</b>\n–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –ø–æ–º–æ—â—å!',
                     parse_mode='HTML')

def support_send(message):
    bot.send_message(977341432,
                     f'üí° <b>–ü–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n</b>\n<i>{message.text}\n</i>\n–æ—Ç @{message.from_user.username}',
                     parse_mode='HTML')
    bot.send_message(message.from_user.id, f'‚úî <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</b>\n–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –ø–æ–º–æ—â—å!',
                     parse_mode='HTML')




def polling():
    try:
        bot.polling(none_stop=True, interval=2)
    except:
        polling()


polling()
