# -*- coding: utf-8 -*-
"""
BookBot is telegram bot, based on telegram API and MongoDB.
His objective is to send interesting quotes from books to users.
"""

import os
import telebot
from telebot import types
import schedule
import time
import random
from threading import Thread
import pymongo

# [BUILT-INS]
token = os.environ.get('TG_TOKEN')
mongoDB = os.environ.get('mongoDB')
client = pymongo.MongoClient(f"{mongoDB}")
quotes = client["BookBot"]["quotes_queue"]
with open("stop_list", "r") as f:
    stopped = f.read().splitlines()
bot = telebot.TeleBot(token)

# [VARIABLES]
with open('users', 'r') as f:
    f = f.read().splitlines()
    callback_cancel = {user: False for user in f}
cancel_button = types.InlineKeyboardMarkup()
key_cancel = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
cancel_button.add(key_cancel)


# Async thread (time scheduler)
class AsyncScheduler(Thread):
    def __init__(self, name):
        Thread.__init__(self)
        self.name = name

    def run(self):
        while True:
            schedule.run_pending()
            time.sleep(59)


scheduler = AsyncScheduler('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏')
scheduler.start()


# [FUNCTIONAL]
# on stop
def stop(message):
    """Moves user to 'stopped' list, so he won't receive scheduled quotes"""
    global stopped
    if str(message.from_user.id) not in stopped:
        with open("stop_list", "a") as stopped_tmp:
            stopped_tmp.write(f"{message.from_user.id}\n")
            stopped_tmp.close()
        stopped.append(str(message.from_user.id))
        bot.send_message(message.from_user.id,
                         '<b>‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n</b> \n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /resume',
                         parse_mode='HTML')
    else:
        bot.send_message(message.from_user.id,
                         '<b>‚ö† –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤–∞—Å!\n</b> \n–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ /resume',
                         parse_mode='HTML')


# on resume
def resume(message):
    """Removes user from 'stopped' list"""
    global stopped
    if str(message.from_user.id) in stopped:
        with open('stop_list', 'r') as stopped_tmp:
            stopped_raw = stopped_tmp.readlines()
            stopped_raw.remove(str(message.from_user.id) + '\n')
        with open("stop_list", "w") as tmp:
            tmp.write(''.join(stopped_raw))
            tmp.close()
        stopped.remove(str(message.from_user.id))
        bot.send_message(message.from_user.id, '<b>‚úî –†–∞—Å—Å—ã–ª–∫–∞ —Ü–∏—Ç–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>',
                         parse_mode='HTML')
    else:
        bot.send_message(message.from_user.id, '<b>‚ö† –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É!</b>',
                         parse_mode='HTML')


# on help
def help_command(message):
    """Help with all commands"""
    commands = ('<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                '</b>\n/random<i> - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫\n'
                '</i>\n/stop<i> - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n'
                '</i>\n/resume<i> - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n'
                '</i>\n/report<i> - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏\n'
                '</i>\n/add<i> - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–∏—Ç–∞—Ç—É</i>'
                )
    bot.send_message(message.from_user.id, text=commands, parse_mode='HTML')


# on report
def report(message):
    """Report about problem or idea from user to admin"""
    keyboard = types.InlineKeyboardMarkup()
    key_report = types.InlineKeyboardButton(text='‚ùó –ü—Ä–æ–±–ª–µ–º–∞/–û—à–∏–±–∫–∞', callback_data='report')
    keyboard.add(key_report)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    key_support = types.InlineKeyboardButton(text='üí° –ò–¥–µ—è/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', callback_data='support')
    keyboard.add(key_support)
    bot.send_message(message.from_user.id, text=f'–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>—Å–æ–æ–±—â–∏—Ç—å</b>?', parse_mode='HTML',
                     reply_markup=keyboard)


def quote_4_user_checker(user_id: str, check=True):
    """Checks for quote available for {user}"""
    if quotes.count_documents({"Users": user_id}) >= 68:
        # removes user id from DB if there is no more available quotes for user
        quotes.update_many({"Users": user_id}, {"$pull": {"Users": user_id}})
    while True:
        quote = quotes.find({})[random.randint(0, quotes.count_documents({}) - 1)]
        if not check:
            # if check for available is not required return random quote
            return quote
        if user_id in quote["Users"]:
            continue
        required_quote = quote
        quotes.update_one({"Quote": quote["Quote"]}, {"$push": {"Users": user_id}})
        return required_quote


def promo():
    """Sends a little promotional message for all users (except my gf)"""
    with open('users', 'r') as users_r:
        r = users_r.read().splitlines()
    for user_id in r:
        if user_id == '1103761115':
            continue
        bot.send_message(user_id,
                         text=f'–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à –±–æ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∂–∞–¥–Ω–∏—á–∞–π –∏ –ø–æ–¥–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏! üòâ\n–Ø –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥!',
                         parse_mode='HTML', disable_notification=True)


def random_q(user, checking=False):
    """ Sends random quote for user.
        If checking == False, it does not check for the presence of id in the database.
    """
    quote = quote_4_user_checker(user, check=checking)
    keyboard = types.InlineKeyboardMarkup()
    key_book = types.InlineKeyboardButton(text='üìñ', callback_data='book', url=quote["URL"])
    keyboard.add(key_book)
    #   key_like = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
    #   keyboard.add(key_like)
    bot.send_message(user,
                     text=f'<i>{quote["Quote"]}\n</i>\n<b>{quote["Book"]}</b>\n#{quote["Author"]}',
                     parse_mode='HTML', reply_markup=keyboard)


def random_quotes():
    """Sends random quote for users who aren't in 'stopped' list"""
    with open('users', 'r') as users_r:
        r = users_r.read().splitlines()
    for user_id in r:
        if user_id in stopped:
            continue
        try:
            random_q(user_id, True)
        except:
            continue


def add_quote(message):
    """Adds a quote from user to file, for further verification."""
    global callback_cancel
    if callback_cancel[message.from_user.id]:
        callback_cancel[message.from_user.id] = False
        return
    if message.text.count('%') != 2:
        global cancel_button
        bot.send_message(message.from_user.id,
                         '‚ö† <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n'
                         '<i>—Ç–µ–∫—Å—Ç_—Ü–∏—Ç–∞—Ç—ã%–∫–Ω–∏–≥–∞%–∞–≤—Ç–æ—Ä</i>\n\n'
                         '<i>–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–Ω–∏—Ç—å, —Ç–æ –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—à—å.%–í–∏–Ω–æ –∏–∑ –æ–¥—É–≤–∞–Ω—á–∏–∫–æ–≤%–†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏</i>',
                         parse_mode='HTML', reply_markup=cancel_button)
        return bot.register_next_step_handler(message, add_quote)
    with open('quotes_4_add.txt', 'a', encoding='utf-8') as verification:
        verification.write(message.text + '%\n')
    bot.send_message(message.from_user.id,
                     '‚úî <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞! –í–∞—à–∞ —Ü–∏—Ç–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
                     ' –∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤!</i>',
                     parse_mode='HTML')
    print(f'{message.from_user.id} (@{message.from_user.username}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã!')
    pass


# problem handler
def report_send(message):
    global callback_cancel
    if callback_cancel[message.from_user.id]:
        callback_cancel[message.from_user.id] = False
        return
    bot.send_message(977341432,
                     f'‚ùó <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞:\n</b>\n<i>{message.text}\n</i>\n–æ—Ç @{message.from_user.username}',
                     parse_mode='HTML')
    bot.send_message(message.from_user.id,
                     f'‚úî <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</b>\n–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –ø–æ–º–æ—â—å!',
                     parse_mode='HTML')


# idea handler
def support_send(message):
    global callback_cancel
    if callback_cancel[message.from_user.id]:
        callback_cancel[message.from_user.id] = False
        return
    bot.send_message(977341432,
                     f'üí° <b>–ü–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n</b>\n<i>{message.text}\n</i>\n–æ—Ç @{message.from_user.username}',
                     parse_mode='HTML')
    bot.send_message(message.from_user.id,
                     f'‚úî <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</b>\n–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –ø–æ–º–æ—â—å!',
                     parse_mode='HTML')


schedule.every().day.at('14:00').do(random_quotes)
schedule.every(2).days.at('16:00').do(promo)


# [ADMIN]
@bot.message_handler(commands=['quote', 'promo'])
def admin(message):
    """Admin message handler, answers on admin requests"""
    print('Admin command execution...')
    if message.from_user.id != 977341432:
        print('False: Non-admin request')
        return
    if message.text == '/quote':
        random_quotes()
        print("Succeed")
    elif message.text == '/promo':
        promo()
        print("Succeed")
    else:
        print('Wrong code')


# [START]
@bot.message_handler(commands=['start'])
def start(message):
    """Welcome message, also sends a demo quote"""
    with open('users', 'r') as users_r:
        r = users_r.read().splitlines()
    with open('users', 'a') as users_w:
        user_id = message.from_user.id
        bot.send_message(user_id,
                         '<b>–ü—Ä–∏–≤–µ—Ç, —è BookBot! üìö\n</b> \n<i>–° –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞ - –Ω–∞–ø–∏—à–∏ /help \n</i>\n–ê —Ç–∞–∫–∂–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–¥–±–æ—Ä–∞ —Ü–∏—Ç–∞—Ç –¥–ª—è –í–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∏—à–µ–∫! üòâ',
                         parse_mode='HTML')
        if str(user_id) in r:
            return
        users_w.write(str(user_id) + '\n')
        print(message.from_user.username)
        quote = quote_4_user_checker(user_id)
        keyboard = types.InlineKeyboardMarkup()
        key_book = types.InlineKeyboardButton(text='üìñ', callback_data='book', url=quote["URL"])
        keyboard.add(key_book)
        bot.send_message(user_id,
                         text=f'–î–µ—Ä–∂–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É!\n\n<i>{quote["Quote"]}\n</i>\n<b>{quote["Book"]}</b>\n#{quote["Author"]}',
                         parse_mode='HTML')


# user commands handler
@bot.message_handler(commands=['stop', 'resume', 'help', 'report', 'random', 'add'])
def commands_handler(message):
    command = message.text
    if command == '/stop':
        stop(message)
    elif command == '/resume':
        resume(message)
    elif command == '/help':
        help_command(message)
    elif command == '/report':
        report(message)
    elif command == '/random':
        try:
            random_q(message.from_user.id, False)
        except:
            pass
    elif command == '/add':
        global cancel_button
        bot.send_message(message.from_user.id,
                         'üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—É –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n'
                         '<i>—Ç–µ–∫—Å—Ç_—Ü–∏—Ç–∞—Ç—ã%–∫–Ω–∏–≥–∞%–∞–≤—Ç–æ—Ä</i>\n\n'
                         '<i>–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–º–Ω–∏—Ç—å, —Ç–æ –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—à—å.%–í–∏–Ω–æ –∏–∑ –æ–¥—É–≤–∞–Ω—á–∏–∫–æ–≤%–†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏</i>',
                         parse_mode='HTML', reply_markup=cancel_button)
        bot.register_next_step_handler(message, add_quote)
    else:
        print('Wrong code')


# on audio
@bot.message_handler(content_types=['voice', 'audio'])
def get_audio_messages(message):
    """Reacts to audio message. Just for fun"""
    if message.voice is not None or message.audio is not None:
        bot.send_message(message.from_user.id, '–ú–º–º... –†–∞–π –¥–ª—è –º–æ–∏—Ö —É—à–µ–π ‚ú®')


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    global cancel_button
    if call.data == "report":
        bot.send_message(call.message.chat.id,
                         '<i>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</i>',
                         parse_mode='HTML', reply_markup=cancel_button)
        bot.register_next_step_handler(call.message, report_send)

    elif call.data == "support":
        bot.send_message(call.message.chat.id,
                         '<i>–û–ø–∏—à–∏—Ç–µ –í–∞—à—É –∏–¥–µ—é, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n</i>',
                         parse_mode='HTML', reply_markup=cancel_button)
        bot.register_next_step_handler(call.message, support_send)

    elif call.data == 'cancel':
        global callback_cancel
        callback_cancel[call.message.from_user.id] = True
        bot.send_message(call.message.chat.id,
                         '<b><i>–û—Ç–º–µ–Ω–µ–Ω–æ!</i></b>',
                         parse_mode='HTML')


def polling():
    try:
        bot.polling(none_stop=True, interval=1)
    # noinspection PyBroadException
    except Exception:
        polling()

        
# with open('users', 'r') as f:
#     users = f.read().splitlines()
# for i in users:
#     try:
#         bot.send_message(i,
#                          '‚ö† <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n'
#                          '–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞!\n'
#                          '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é /add!',
#                          parse_mode='HTML')
#     except:
#         continue

# random_quotes()
polling()
